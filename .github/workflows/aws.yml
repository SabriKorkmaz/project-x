# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the main branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
  PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY  }}
  HOST_NAME : ${{ secrets.HOST_NAME  }}
  HOST_USER : ${{ secrets.HOST_USER  }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME  }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD  }}
  
jobs:      
  connect-ec2:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2 
      - name: Deploy in EC2
        run: |
          chmod 700 /root/.ssh
          chmod 600 /root/.ssh/authorized_keys
          echo "${{env.PRIVATE_KEY}}" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${{env.HOST_USER}}@${{env.HOST_NAME}} '
          
          docker login -u="${{env.DOCKER_USERNAME}}" -p="${{env.DOCKER_PASSWORD}}"
          docker rm -f $(docker ps -a -q)
          docker rmi $(docker images -a -q)
          docker pull sbrkrkmz/project-x:project-x-frontend
          docker run -dp 8080:80 --name project-x-ui sbrkrkmz/project-x:project-x-frontend
          '
  
